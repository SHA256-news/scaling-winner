#!/usr/bin/env python3
"""
Test script for the Clean Functional News Bot
Quick verification that all dependencies and components work
"""

import os
import sys
from datetime import datetime

def test_requirements():
    """Test that all required packages are installed."""
    print("üì¶ Testing package imports...")
    
    try:
        import google.generativeai as genai
        print("‚úÖ google-generativeai imported successfully")
    except ImportError:
        print("‚ùå google-generativeai not installed")
        print("   Install with: pip install google-generativeai>=0.8.0")
        return False
    
    try:
        from eventregistry import EventRegistry, QueryArticlesIter
        print("‚úÖ eventregistry imported successfully")
        print("‚úÖ QueryArticlesIter available (v9.x features)")
    except ImportError as e:
        print("‚ùå eventregistry not installed or missing QueryArticlesIter")
        print("   Install with: pip install eventregistry==9.1")
        return False
    
    try:
        import requests
        print("‚úÖ requests imported successfully")
    except ImportError:
        print("‚ùå requests not installed")
        print("   Install with: pip install requests")
        return False
    
    try:
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv imported successfully")
    except ImportError:
        print("‚ö†Ô∏è python-dotenv not installed (optional)")
        print("   Install with: pip install python-dotenv")
    
    print("‚úÖ All required packages imported successfully!")
    return True

def test_clean_bot_components():
    """Test the clean functional news bot components without API calls."""
    print("üß™ Testing Clean Functional News Bot Components...")
    
    # Add src to path
    sys.path.insert(0, 'src')
    
    try:
        # Test importing the main functions from the clean bot
        import importlib.util
        spec = importlib.util.spec_from_file_location(
            "clean_bot", 
            "src/clean_functional_news_bot_with_issues.py"
        )
        clean_bot = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(clean_bot)
        
        print("‚úÖ Successfully imported clean functional news bot")
    except ImportError as e:
        print(f"‚ùå Failed to import clean bot: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error loading clean bot module: {e}")
        return False
    
    # Test article saving functionality
    try:
        dummy_article = {
            'headline': 'Test Clean News Bot Article',
            'content': 'This is a test article generated by the Clean Functional News Bot. It includes proper formatting and structure.',
            'summary': 'Test summary of the article content.',
            'tags': ['test', 'clean-bot', 'verification'],
            'original_source': 'Test Source',
            'original_url': 'https://example.com/test',
            'generated_at': datetime.now().isoformat()
        }
        
        # Test the save function
        filename = clean_bot.save_article_to_file(dummy_article)
        
        if filename and os.path.exists(filename):
            print(f"‚úÖ Successfully saved test article: {filename}")
            
            # Check file content
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()
                
            if len(content) > 200 and 'Test Clean News Bot Article' in content:
                print("‚úÖ Article file has proper content and structure")
            else:
                print("‚ö†Ô∏è Article file content seems incomplete")
                
            # Cleanup
            os.remove(filename)
        else:
            print("‚ùå Article file was not created")
            return False
            
    except Exception as e:
        print(f"‚ùå Failed to test article saving: {e}")
        return False
    
    # Test demo mode function
    try:
        print("‚úÖ Testing demo mode...")
        # Capture demo output (won't actually print during test)
        import io
        from contextlib import redirect_stdout
        
        demo_output = io.StringIO()
        with redirect_stdout(demo_output):
            clean_bot.demo_mode()
        
        demo_text = demo_output.getvalue()
        if "Demo News Articles Structure" in demo_text:
            print("‚úÖ Demo mode works correctly")
        else:
            print("‚ö†Ô∏è Demo mode output unexpected")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Demo mode test failed: {e}")
    
    print("‚úÖ All component tests passed!")
    return True

def test_environment_setup():
    """Test environment and configuration."""
    print("üîß Testing environment setup...")
    
    # Check for API keys (without exposing them)
    google_key = os.getenv('GOOGLE_API_KEY')
    event_key = os.getenv('EVENTREGISTRY_API_KEY')
    
    if google_key:
        print(f"‚úÖ GOOGLE_API_KEY found ({len(google_key)} chars)")
    else:
        print("‚ö†Ô∏è GOOGLE_API_KEY not set (will use demo mode)")
    
    if event_key:
        print(f"‚úÖ EVENTREGISTRY_API_KEY found ({len(event_key)} chars)")
    else:
        print("‚ö†Ô∏è EVENTREGISTRY_API_KEY not set (will use demo mode)")
    
    # Check for .env file
    if os.path.exists('.env'):
        print("‚úÖ .env file found")
    else:
        print("‚ÑπÔ∏è No .env file (using environment variables)")
    
    # Check GitHub environment for workflows
    if os.getenv('GITHUB_ACTIONS'):
        print("‚úÖ Running in GitHub Actions environment")
        github_token = os.getenv('GITHUB_TOKEN')
        github_repo = os.getenv('GITHUB_REPOSITORY')
        
        if github_token:
            print("‚úÖ GITHUB_TOKEN available for issue creation")
        else:
            print("‚ö†Ô∏è GITHUB_TOKEN not available")
            
        if github_repo:
            print(f"‚úÖ GITHUB_REPOSITORY: {github_repo}")
        else:
            print("‚ö†Ô∏è GITHUB_REPOSITORY not set")
    else:
        print("‚ÑπÔ∏è Running in local environment")
    
    print("‚úÖ Environment check completed!")
    return True

def main():
    """Run all tests."""
    print("üöÄ Clean Functional News Bot Test Suite")
    print("=" * 50)
    
    # Test 1: Package imports
    if not test_requirements():
        print("\n‚ùå Package tests failed! Install requirements:")
        print("   pip install -r clean_requirements.txt")
        sys.exit(1)
    
    print("\n" + "=" * 50)
    
    # Test 2: Environment setup
    test_environment_setup()
    
    print("\n" + "=" * 50)
    
    # Test 3: Component functionality
    if not test_clean_bot_components():
        print("\n‚ùå Component tests failed!")
        sys.exit(1)
    
    print("\n" + "=" * 50)
    print("üéâ All tests passed!")
    
    print("\nüìã Next Steps:")
    if not os.getenv('GOOGLE_API_KEY') or not os.getenv('EVENTREGISTRY_API_KEY'):
        print("1. Set your API keys:")
        print("   export GOOGLE_API_KEY='your-key'")
        print("   export EVENTREGISTRY_API_KEY='your-key'")
        print("2. Run the bot:")
        print("   python3 src/clean_functional_news_bot_with_issues.py")
    else:
        print("1. API keys are set - ready to run!")
        print("2. Run the bot:")
        print("   python3 src/clean_functional_news_bot_with_issues.py")
    
    print("3. Or run the GitHub workflow for full automation!")

if __name__ == "__main__":
    main()
