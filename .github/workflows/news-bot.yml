name: Daily News Bot

on:
  schedule:
    # Run daily at 8:00 AM UTC (adjust timezone as needed)
    - cron: '0 8 * * *'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      keyword:
        description: 'Search keyword for news'
        required: false
        default: 'artificial intelligence'
      style:
        description: 'Article style'
        required: false
        default: 'professional'
        type: choice
        options:
          - professional
          - casual
          - academic
      category:
        description: 'News category'
        required: false
        default: 'technology'
        type: choice
        options:
          - technology
          - business
          - health
          - science
          - sports
          - politics

jobs:
  generate-news:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert eventregistry google-generativeai python-dotenv
        
    - name: Convert notebook to Python script
      run: |
        jupyter nbconvert --to python examples/News_Bot_EventRegistry_Gemini.ipynb --output news_bot_script.py
        
    - name: Create news bot runner
      run: |
        cat << 'RUNNER_EOF' > run_news_bot.py
        import os
        import sys
        import json
        from datetime import datetime
        
        # Import the converted notebook functions
        exec(open('news_bot_script.py').read())
        
        def main():
            # Get inputs from GitHub Actions or use defaults
            keyword = os.getenv('INPUT_KEYWORD', 'artificial intelligence')
            style = os.getenv('INPUT_STYLE', 'professional')
            category = os.getenv('INPUT_CATEGORY', 'technology')
            
            print(f"🤖 Starting News Bot...")
            print(f"📝 Keyword: {keyword}")
            print(f"🎨 Style: {style}")
            print(f"📂 Category: {category}")
            
            try:
                # Generate article from keyword
                if keyword and keyword != 'artificial intelligence':
                    print(f"🔍 Generating article for keyword: {keyword}")
                    article = news_bot.generate_article_from_keyword(
                        keyword=keyword,
                        style=style,
                        length="medium",
                        include_analysis=True
                    )
                    
                    if "error" not in article:
                        filename = f"article_{keyword.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.md"
                        save_article_to_file(article, filename)
                        print(f"✅ Article saved: {filename}")
                    else:
                        print(f"❌ Error generating article: {article['error']}")
                
                # Generate category report
                print(f"📊 Generating category report: {category}")
                report = news_bot.generate_category_report(category=category, max_articles=3)
                
                if "error" not in report:
                    report_filename = f"report_{category}_{datetime.now().strftime('%Y%m%d')}.json"
                    export_digest_to_json(report, report_filename)
                    print(f"✅ Report saved: {report_filename}")
                    
                    # Create summary
                    with open(f"summary_{datetime.now().strftime('%Y%m%d')}.md", 'w') as f:
                        f.write(f"# Daily News Summary - {datetime.now().strftime('%Y-%m-%d')}\n\n")
                        f.write(f"## Category: {category.title()}\n\n")
                        f.write(f"{report['summary']}\n\n")
                        f.write(f"**Generated:** {len(report['articles'])} articles\n")
                        f.write(f"**Date:** {report['date']}\n")
                    
                    print("✅ Summary created")
                else:
                    print(f"❌ Error generating report: {report['error']}")
                
            except Exception as e:
                print(f"❌ Unexpected error: {str(e)}")
                sys.exit(1)
        
        if __name__ == "__main__":
            main()
        RUNNER_EOF
        
    - name: Run news bot
      env:
        EVENTREGISTRY_API_KEY: ${{ secrets.EVENTREGISTRY_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        INPUT_KEYWORD: ${{ github.event.inputs.keyword }}
        INPUT_STYLE: ${{ github.event.inputs.style }}
        INPUT_CATEGORY: ${{ github.event.inputs.category }}
      run: python run_news_bot.py
      
    - name: Upload generated articles
      uses: actions/upload-artifact@v4
      with:
        name: news-articles-${{ github.run_number }}
        path: |
          *.md
          *.json
        retention-days: 30
        
    - name: Commit and push generated content (optional)
      if: github.event_name == 'schedule'  # Only auto-commit on scheduled runs
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create a directory for generated content
        mkdir -p generated_news/$(date +%Y-%m-%d)
        mv *.md *.json generated_news/$(date +%Y-%m-%d)/ 2>/dev/null || true
        
        # Commit if there are changes
        if [[ -n $(git status --porcelain) ]]; then
          git add generated_news/
          git commit -m "🤖 Daily news update - $(date +%Y-%m-%d)"
          git push
        else
          echo "No changes to commit"
        fi
